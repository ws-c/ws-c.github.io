<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信小程序-基础语法</title>
    <url>/2024/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/2.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="wxml模板语法"><a href="#wxml模板语法" class="headerlink" title="wxml模板语法"></a>wxml模板语法</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>类似于vue</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">data（）&#123;</span><br><span class="line">    str：<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在js里写</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">//在wxml里写</span><br></pre></td></tr></table></figure></div>

<h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">data（）&#123;</span><br><span class="line">    src：<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;src&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>wx：if 和 hidden </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span>	<span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span>123<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">// block只是一个容器，本身不会被渲染，类似于template</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hideen</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">//hideen控制元素的显示和隐藏（display）</span><br></pre></td></tr></table></figure></div>

<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">// item指当前项</span><br></pre></td></tr></table></figure></div>



<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924091111140.png"
                      alt="image-20220924091111140"
                ></p>
<h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924091232368.png"
                      alt="image-20220924091232368"
                ></p>
<h2 id="事件对象的属性列表"><a href="#事件对象的属性列表" class="headerlink" title="事件对象的属性列表"></a>事件对象的属性列表</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924091454110.png"
                      alt="image-20220924091454110"
                ></p>
<h3 id="target和currentTarget的区别"><a href="#target和currentTarget的区别" class="headerlink" title="target和currentTarget的区别"></a>target和currentTarget的区别</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924091841618.png"
                      alt="image-20220924091841618"
                ></p>
<h2 id="数据赋值"><a href="#数据赋值" class="headerlink" title="数据赋值"></a>数据赋值</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">btnTap</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924093424262.png"
                      alt="image-20220924093424262"
                ></p>
<p>​	</p>
<p>bindtap使用data-*的方式传参</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&#x27;btnTap&#x27;</span> <span class="attr">data-info</span>=<span class="string">&#x27;&#123;&#123;msg&#125;&#125;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// 回调函数 e.target.dataset.info里获取 msg</span><br></pre></td></tr></table></figure></div>

<p>bindinput使用value</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&#x27;btnTap&#x27;</span><span class="attr">value</span>=<span class="string">&#x27;&#123;&#123;msg&#125;&#125;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// 回调函数 e.detail.value里获取 msg</span><br></pre></td></tr></table></figure></div>



<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924223609546.png"
                      alt="image-20220924223609546"
                ></p>
<h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>最少两个，最多5个页签，tabbar页面在pages必须写在前面</p>
<p>组成部分</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924225136505.png"
                      alt="image-20220924225136505"
                ></p>
<p>tabBar配置项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924225550309.png"
                      alt="image-20220924225550309"
                ></p>
<p>每个tab的配置项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924225635462.png"
                      alt="image-20220924225635462"
                ></p>
<h1 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h1><p>出于安全性方面的考虑，只能请求https，必须将接口的域名添加到信任列表里</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220925124137694.png"
                      alt="image-20220925124137694"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220925124658341.png"
                      alt="image-20220925124658341"
                ></p>
<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">//传参的数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序介绍</title>
    <url>/2024/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/1.%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="三大件"><a href="#三大件" class="headerlink" title="三大件"></a>三大件</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923150609719.png"
                      alt="image-20220923150609719"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923150945206.png"
                      alt="image-20220923150945206"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923151230659.png"
                      alt="image-20220923151230659"
                ></p>
<h1 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h1><p>为了实现屏幕的自动适配，rpx把设备的屏幕，在宽度上等分成750份</p>
<p>在iphone6上，屏幕宽度为375px</p>
<p>1rpx &#x3D; 0.5px &#x3D; 1物理像素</p>
<p>1px &#x3D; 2rpx</p>
<h1 id="全局样式和局部样式"><a href="#全局样式和局部样式" class="headerlink" title="全局样式和局部样式"></a>全局样式和局部样式</h1><p>@import “”; 导入外联样式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220924204049624.png"
                      alt="image-20220924204049624"
                ></p>
<h1 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923190111175.png"
                      alt="image-20220923190111175"
                ></p>
<h1 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h1><h2 id="swiper组件常用属性"><a href="#swiper组件常用属性" class="headerlink" title="swiper组件常用属性"></a>swiper组件常用属性</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923192929188.png"
                      alt="image-20220923192929188"
                ></p>
<h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><p>selectable属性 实现长按选中效果</p>
<h2 id="rich-text"><a href="#rich-text" class="headerlink" title="rich text"></a>rich text</h2><p>将html渲染成ui结构</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&#x27;&lt;h1&gt;123&lt;/h1&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>默认有宽高，需要用mode属性调节</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923193956957.png"
                      alt="image-20220923193956957"
                ></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923194545159.png"
                      alt="image-20220923194545159"
                ></p>
<h1 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923195059621.png"
                      alt="image-20220923195059621"
                ></p>
<p>各级权限</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923195243846.png"
                      alt="image-20220923195243846"
                ></p>
<p>版本阶段</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20220923195558036.png"
                      alt="image-20220923195558036"
                ></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-进阶使用</title>
    <url>/2024/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/4.%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><p>组件和页面的区别</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011193716587.png"
                      alt="image-20221011193716587"
                ></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>局部引用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011193211210.png"
                      alt="image-20221011193211210"
                ></p>
<p>全局引用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011193259987.png"
                      alt="image-20221011193259987"
                ></p>
<h2 id="样式隔离"><a href="#样式隔离" class="headerlink" title="样式隔离"></a>样式隔离</h2><p>页面样式不影响自定义样式，自定义样式不影响页面样式</p>
<p>全局样式也对组件无效</p>
<p>只有class选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响 </p>
<p>建议多使用class选择器</p>
<p>通过styleIsolation修改组件的样式隔离选项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011194757205.png"
                      alt="image-20221011194757205"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011194736883.png"
                      alt="image-20221011194736883"
                ></p>
<h2 id="properties属性"><a href="#properties属性" class="headerlink" title="properties属性"></a>properties属性</h2><p>properties是组件的对外属性，用来接收外界传递到组件中的数据</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011195857447.png"
                      alt="image-20221011195857447"
                ></p>
<p>&#x3D;&#x3D;在小程序里，properties和data数据的用法相同，它们都是可读可写的&#x3D;&#x3D;</p>
<h2 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h2><p>类似于vue的watch侦听器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011201005082.png"
                      alt="image-20221011201005082"
                ></p>
<p>监听对象上的属性写法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;对象.属性A, 对象.属性A&#x27;</span>: <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**可以监听对象里所有的属性</span></span><br><span class="line"><span class="string">&#x27;对象.**&#x27;</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h2><p>指那些不用于界面渲染的data字段，设置可以提升页面更新性能</p>
<p>指定pureDataPattern为一个正则表达式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011204129964.png"
                      alt="image-20221011204129964"
                ></p>
<h2 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h2><p>写在lifetimes节点里</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011205654519.png"
                      alt="image-20221011205654519"
                ></p>
<p>分类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011204801995.png"
                      alt="image-20221011204801995"
                ></p>
<p>主要的生命周期函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011205249994.png"
                      alt="image-20221011205249994"
                ></p>
<h2 id="组件所在页面的生命函数"><a href="#组件所在页面的生命函数" class="headerlink" title="组件所在页面的生命函数"></a>组件所在页面的生命函数</h2><p>自定义组件的行为依赖于页面状态的变化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011210333525.png"
                      alt="image-20221011210333525"
                ></p>
<p>定义在pageLifetimes节点<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221011210441065.png"
                      alt="image-20221011210441065"
                ></p>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>默认组件只有一个插槽</p>
<p>如果需要多个插槽，要去手动配置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012165001573.png"
                      alt="image-20221012165001573"
                ></p>
<p>多个插槽用name属性来区分</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//组件 test1</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//使用者</span><br><span class="line"><span class="tag">&lt;<span class="name">test1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test1</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>父子组件通信的3种方式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012165549204.png"
                      alt="image-20221012165549204"
                ></p>
<p>属性绑定</p>
<p>​	父组件在子组件标签里传参，子组件用properties接收</p>
<p>事件绑定</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012170548862.png"
                      alt="image-20221012170548862"
                ></p>
<p>获取子组件实例</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012172529596.png"
                      alt="image-20221012172529596"
                ></p>
<h2 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a>behaviors</h2><p>组件之间代码共享</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012172827711.png"
                      alt="image-20221012172827711"
                ></p>
<p>创建</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012173202420.png"
                      alt="image-20221012173202420"
                ></p>
<p>引入</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221012173307866.png"
                      alt="image-20221012173307866"
                ></p>
<p>同名覆盖和组合规则</p>
<p><a class="link"   href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html" >https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="CSS自定义属性"><a href="#CSS自定义属性" class="headerlink" title="CSS自定义属性"></a>CSS自定义属性</h1><p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>可以在app.wxss里配置全局属性</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">    <span class="attr">--danger-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221013205855229.png"
                      alt="image-20221013205855229"
                ></p>
<p>共享方案</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221013210126428.png"
                      alt="image-20221013210126428"
                ></p>
<h1 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h1><p>按需下载，减少小程序首次启动的下载时间</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221014170537589.png"
                      alt="image-20221014170537589"
                ></p>
<p>配置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221014171210239.png"
                      alt="image-20221014171210239"
                ></p>
<p>引用原则</p>
<ol>
<li>主包无法引用分包内的私有资源</li>
<li>分包之间不能互相引用</li>
<li>分包可以引用主包内的公共资源</li>
</ol>
<p>预下载</p>
<p>在app.json里配置preloadRule</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221014174524407.png"
                      alt="image-20221014174524407"
                ></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-页面导航</title>
    <url>/2024/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/3.%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h1 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h1><p>​	两种方式</p>
<h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p>在页面上声明一个<navigator>组件</p>
<p>通过点击<navigator>组件实现页面跳转</p>
<p><strong>tabBar页面</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009102332814.png"
                      alt="image-20221009102332814"
                ></p>
<p><strong>非tabBar页面</strong></p>
<p>​	open-type&#x3D; “navigate”</p>
<p>​	为了方便，默认可以不写</p>
<p><strong>后退导航</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009103102448.png"
                      alt="image-20221009103102448"
                ></p>
<h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>调用小程序的导航API，实现页面跳转</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009184324138.png"
                      alt="image-20221009184324138"
                ></p>
<p><strong>tabBar</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009103249150.png"
                      alt="image-20221009103249150"
                ></p>
<p>非tabBar</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009103615400.png"
                      alt="image-20221009103615400"
                ></p>
<p>后退导航</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009104046472.png"
                      alt="image-20221009104046472"
                ></p>
<h2 id="传参和接收"><a href="#传参和接收" class="headerlink" title="传参和接收"></a>传参和接收</h2><p>声明式和编程式同理</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009104353540.png"
                      alt="image-20221009104353540"
                ></p>
<p>&#x3D;&#x3D;onload接收参数&#x3D;&#x3D;</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options) <span class="comment">//options等于传递过来的参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">query</span>:options    <span class="comment">//赋值给data里的自定义对象query，供页面来使用</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="下拉刷新事件"><a href="#下拉刷新事件" class="headerlink" title="下拉刷新事件"></a>下拉刷新事件</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009105720352.png"
                      alt="image-20221009105720352"
                ></p>
<p>在实际开发中推荐第二种，为需要的页面单独开启下拉刷新的效果</p>
<p>onPullDownRefresh 监听用户下拉动作</p>
<p>wx.stopPullDownRefresh()</p>
<p>当处理完下拉刷新后，loading效果会一直显示，不会主动消失</p>
<p>需要手动关闭下拉刷新效果</p>
<h1 id="上拉触底事件"><a href="#上拉触底事件" class="headerlink" title="上拉触底事件"></a>上拉触底事件</h1><p>通过手指上拉操作，实现加载更多数据的行为</p>
<p>onReachBottom 上拉处理函数</p>
<p>配置上拉触底距离</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009111525146.png"
                      alt="image-20221009111525146"
                ></p>
<h2 id="loading效果"><a href="#loading效果" class="headerlink" title="loading效果"></a>loading效果</h2><p>数据加载时触发loading效果，成功后使用hide手动关闭<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009113638783.png"
                      alt="image-20221009113638783"
                ></p>
<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>定义一个节流阀  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009114305986.png"
                      alt="image-20221009114305986"
                ></p>
<h1 id="自定义编译模式"><a href="#自定义编译模式" class="headerlink" title="自定义编译模式"></a>自定义编译模式</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009114713333.png"
                      alt="image-20221009114713333"
                ></p>
<p>默认每次重新编译会返回首页，通过自定义配置可以实现定位，传参</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>小程序分为两类 ：</p>
<p>​	1.应用生命周期   	启动 -&gt; 运行 -&gt; 销毁</p>
<p>​	2.页面生命周期 	  每个页面的加载 -&gt; 渲染 -&gt; 销毁</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009184851428.png"
                      alt="image-20221009184851428"
                ></p>
<h2 id="应用生命周期函数"><a href="#应用生命周期函数" class="headerlink" title="应用生命周期函数"></a>应用生命周期函数</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009190843402.png"
                      alt="image-20221009190843402"
                ></p>
<h2 id="页面生命周期函数"><a href="#页面生命周期函数" class="headerlink" title="页面生命周期函数"></a>页面生命周期函数</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009190927440.png"
                      alt="image-20221009190927440"
                ></p>
<h1 id="WXS脚本"><a href="#WXS脚本" class="headerlink" title="WXS脚本"></a>WXS脚本</h1><p>WXS是小程序独有的一套脚本语言</p>
<p>wxml中无法调用页面的JS中定义的函数，但可以调用WXS</p>
<p>一般当过滤器使用</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>性能好,在iOS设备上wxs比js快好几倍</li>
<li>隔离性，不能调用js的函数和小程序提供的API</li>
<li>不能作为组件的事件回调函数</li>
</ul>
<h2 id="WXS和JS的关系"><a href="#WXS和JS的关系" class="headerlink" title="WXS和JS的关系"></a>WXS和JS的关系</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009191604013.png"
                      alt="image-20221009191604013"
                ></p>
<h2 id="内嵌脚本"><a href="#内嵌脚本" class="headerlink" title="内嵌脚本"></a>内嵌脚本</h2><p>将文本变成大写形式</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009192225170.png"
                      alt="image-20221009192225170"
                ></p>
<h2 id="外联脚本"><a href="#外联脚本" class="headerlink" title="外联脚本"></a>外联脚本</h2><p>将文本变成小写形式</p>
<p>​	一、定义</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009192628655.png"
                      alt="image-20221009192628655"
                ></p>
<p> 二、引入<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221009192747907.png"
                      alt="image-20221009192747907"
                ></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/2024/03/30/vue2/1.webpack/</url>
    <content><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>webpack是一个静态模块打包工具，作用是分析、压缩、打包代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230102133716081.png"
                      alt="image-20230102133716081"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="comment">//入口可以是相对路径，出口必须绝对路径</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack本身只支持打包js文件，其他类型需要使用loader</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">             	<span class="attr">test</span>: <span class="string">&#x27;\.css$/i&#x27;</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125; <span class="comment">//第一個把js内的样式插入DOM上；第二個识别css文件 从右往左执行</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>图片处理机制</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230102210816004.png"
                      alt="image-20230102210816004"
                ></p>
<p>base64:</p>
<p>​	好处：可以减少网络请求次数，把图片放在js文件里</p>
<p>​	坏处：会增加30%体积，所以限制了大小上限</p>
<h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h2><p>打包在运行内存里，效率更高</p>
<p>mode：</p>
<p>​	development：开发环境，进行打包时不会压缩混淆代码</p>
<p>​	production：生产环境，会压缩混淆代码，导致更慢（默认模式）</p>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由</title>
    <url>/2024/03/30/vue2/3.vue%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>实现单页面应用（SPA）</p>
<p>优点：整体不刷新页面，数据传递容易</p>
<p>缺点：首次加载比较慢，不利于SEO</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230113192813556.png"
                      alt="image-20230113192813556"
                ></p>
<h1 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h1><p>代替a标签，自带激活时的类名&#x3D;&#x3D;router-link-active&#x3D;&#x3D;</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/组件名&quot;&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div>

<p>​	使用子路由时：还会加上<em>router-link-exact-active 类名(精准匹配)</em> </p>
<p>​	url的hash值和href完全匹配，但不常用</p>
<p>两种传参方式：</p>
<p>1.查询字符串</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/组件名?参数名=值&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">//目标组件中</span><br><span class="line">&lt;p&gt;&#123;&#123;$route.query.参数名&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>2.动态路径参数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/组件名/值&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">需要路由对象提前配置path: &quot;/path/:参数名&quot;</span><br><span class="line"></span><br><span class="line">//目标组件中</span><br><span class="line">&lt;p&gt;&#123;&#123;$route.params.参数名&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>



<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>匹配path后，强制跳转path路径</p>
<p>默认路径</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/组件名&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">//匹配不到就匹配这个</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">NotFound</span> <span class="comment">//组件名</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>



<h1 id="路由模式设置"><a href="#路由模式设置" class="headerlink" title="路由模式设置"></a>路由模式设置</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.通过规则创建对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//默认是hash： 有 &quot;#&quot;</span></span><br><span class="line"><span class="comment">//history不带#，但需要后端配合</span></span><br></pre></td></tr></table></figure></div>



<h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;路由路径&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;路由名&quot;</span>,  <span class="comment">//二选一</span></span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;参数名&#x27;</span>: 值</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;参数名&#x27;</span>: 值</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//path 配合 query</span></span><br><span class="line"><span class="comment">//name 配合 query、params</span></span><br></pre></td></tr></table></figure></div>

<p>query刷新页面还在，URL会明文显示</p>
<p>params刷新页面就没了，不会显示在URL上</p>
<p>$route 是路由参数对象，用于接收路由参数</p>
<p>$router 是路由对象，用于做路由导航，进行跳转</p>
<h1 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/find&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Find</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;ranking&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: ranking</span><br><span class="line">            &#125;<span class="comment">//不要加斜杠（这表示根路径）</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>



<h1 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h1><p>作用：路由跳转之前，会触发一个函数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/my&#x27;</span> &amp;&amp;  isLogin == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你还没有登录&#x27;</span>)</span><br><span class="line">        <span class="comment">//next(false) 拦截</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/part&#x27;</span>) <span class="comment">//跳转到其他页面</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>() <span class="comment">//正常跳转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></div>



<h1 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a>组件缓存</h1><p>背景：在router切换组件时会销毁之前的组件</p>
<p>作用：不会频繁的创建和销毁组件，缓存之前组件的状态</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></div>

<p>匹配缓存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;My&quot; exclude=&quot;My&quot;&gt;</span><br><span class="line">    //只包含;只排除 值是组件的name属性</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></div>



<h1 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h1><p>背景：假设缓存的组件是新闻列表，刷新数据的方法在created方法中，这样将永远执行方法了</p>
<p>​		   因此组件缓存后会多两个钩子函数</p>
<p>activated	- 激活时触发</p>
<p>deactivated	-失去激活时触发</p>
]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2024/03/30/vue2/4.vuex/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex是vue项目中实现大范围数据共享的技术方案</p>
<p>作用：能够方便、高效地实现组件之间的数据共享</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230116161943746.png"
                      alt="image-20230116161943746"
                ></p>
<ol>
<li><p>数据的存取一步到位，不需要层层传递</p>
</li>
<li><p>数据的流动非常清晰，记录每次操作的痕迹</p>
</li>
<li><p>存储在Vuex中的数据都是响应式的</p>
</li>
</ol>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.下包</span></span><br><span class="line"><span class="comment">//2.导入 </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//3.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">//4.创建Store 对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//5.挂载到vue对象上</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span> <span class="title function_">h</span>(app),</span><br><span class="line">    store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>



<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>概念：本质上就是一个对象</p>
<p>作用：存储全局共享的数据</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    count:&#123;&#123;this.$store.state.count&#125;&#125; </span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><p>作用：简化属性名</p>
<p>将store中指定的数据，映射为当前组件的计算属性</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230116170357834.png"
                      alt="image-20230116170357834"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]),</span><br><span class="line">    &#125;,<span class="comment">//展开运算符，将对象的属性展开放到computed对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h1><p>背景：直接修改会导致来源不明确的问题，不 方便调试和维护</p>
<p>概念：同步函数，专门用来变更Store中的数据</p>
<p>作用：所有组件都通过mutation修改，可以追踪state的每一次变化,确保修改来源的唯一性</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230117151044889.png"
                      alt="image-20230117151044889"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line">   		<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>) </span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="comment">//组件commit调用</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>载荷就是参数的意思，通过载荷可以提高Mutation方法的通用性</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state,payload</span>) &#123;</span><br><span class="line">        state.<span class="property">count</span> += payload</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//payload只能有一个，如果多个参数可以写成对象形式</span></span><br></pre></td></tr></table></figure></div>

<h2 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h2><p>把Store中指定的mutation，映射为当前组件的methods</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div @click=&quot;add(1)&quot;&gt;+1&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   	<span class="attr">methods</span>:&#123;</span><br><span class="line">        ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;add&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>背景：为了保证state的每次变化可追踪，Mutation必须是同步函数</p>
<p>概念：专门用来处理Vuex中的异步操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230117163055599.png"
                      alt="image-20230117163055599"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">asyncAdd</span>(<span class="params">context, payload</span>)&#123;</span><br><span class="line">            <span class="comment">//context可以理解为简化版的store对象</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,payload)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line">   		<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;asyncAdd&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="comment">//组件dispatch调用</span></span><br></pre></td></tr></table></figure></div>

<h2 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h2><p>把Store中指定的action，映射为当前组件的methods</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div @click=&quot;addAsync(10)&quot;&gt;+10&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   	<span class="attr">methods</span>:&#123;</span><br><span class="line">        ...<span class="title function_">mapActions</span>([<span class="string">&#x27;asyncAdd&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><p>背景：组件中的计算属性复用性比较低</p>
<p>概念：Vuex中的计算属性</p>
<p>作用：当数据发生变化时，Getter的返回值就会自动更新</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">	<span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">isAllDone</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">list</span>.<span class="title function_">evey</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">isDone</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    所有任务的完成情况：&#123;&#123;$store.getters.isAllDone&#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h2><p>把getter映射为当前组件的计算属性</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Left&#x27;</span>,</span><br><span class="line">   	<span class="attr">computed</span>:&#123;</span><br><span class="line">        ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;isAllDone&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>背景：随着项目的工程量变大，数据越来越复杂</p>
<p>概念：按照模块化把不同业务的数据和方法进行封装</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//安装</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">//导入子模块</span></span><br><span class="line"><span class="keyword">import</span> shopcar <span class="keyword">from</span> <span class="string">&#x27;./shopcar&#x27;</span></span><br><span class="line"><span class="comment">//创建Store对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">//注册子模块</span></span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        shopcar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/shopcar.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="namespaced"><a href="#namespaced" class="headerlink" title="namespaced"></a>namespaced</h2><p>背景：不同子模块相同的名称方法被调用，会都调用一遍</p>
<p>概念：命名空间</p>
<p>作用：解决不同模块之间成员名称冲突的问题，建议每个模块都开</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/shopcar.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;$store.commit(&#x27;shopcar/test&#x27;)&quot;&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;$store.state.shopcar.name&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="mapState-1"><a href="#mapState-1" class="headerlink" title="mapState"></a>mapState</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">	...<span class="title function_">mapState</span>(<span class="string">&#x27;子模块名&#x27;</span>,[<span class="string">&#x27;数据名&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2024/03/30/vue2/2.vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>渐进式JavaScript框架</p>
<p>​	渐进式：想用什么就用什么</p>
<p>​	库：封装的属性和库 （例JQuery）</p>
<p>​	框架：拥有自己的语法规则和元素</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230103155008725.png"
                      alt="image-20230103155008725"
                ></p>
<h1 id="单文件SFC"><a href="#单文件SFC" class="headerlink" title="单文件SFC"></a>单文件SFC</h1><p>全局css样式引入到main.js，js库引入到单个vue文件上</p>
<p>因为单文件vue作用域相互独立</p>
<p>js库设置全局的方法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br><span class="line"><span class="comment">//$是在vue中所有实例中都可用的一个简单约定，这样做会避免和已被定义的数据，方法，计算属性产生冲突。</span></span><br></pre></td></tr></table></figure></div>



<h1 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h1><p>让样式只在组件内生效</p>
<p>组件内标签都被添加一个data-v-hash值</p>
<p>style里所有的选择器都加上属性选择器</p>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>v-bind 	绑定属性:</p>
<p>v-on 	   绑定事件@</p>
<p>v-on事件修饰符</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a @click.prevent.stop= &quot;toBaidu&quot; href=&quot;baidu.com&quot;&gt;&lt;/a&gt;</span><br><span class="line">//.stop 阻止事件冒泡 ；.prevent 阻止默认行为</span><br></pre></td></tr></table></figure></div>



<p>v-model 双向绑定</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;btn :value=&quot;count&quot; @input=&quot;val =&gt; count = val&quot;&gt;&lt;/btn&gt;</span><br><span class="line">//本质就是一个语法糖，给value属性赋值，绑定input事件，并把值传给变量</span><br></pre></td></tr></table></figure></div>



<p>.native</p>
<p>自定义的组件无法像html标签一样触发原生事件，需要使用native</p>
<p>父组件监听子组件的一个原生事件</p>
<p>.sync</p>
<p>实现父子组件数据之间的双向绑定，与<strong>v-model类似</strong>。<br>类别在于：一个组件上只能有一个v-model，.sync修饰符可以有多个。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 正常父传子： </span><br><span class="line">&lt;com1 :a=&quot;num&quot; :b=&quot;num2&quot;&gt;&lt;/com1&gt;</span><br><span class="line"></span><br><span class="line">// 加上sync之后父传子： </span><br><span class="line">&lt;com1 :a.sync=&quot;num&quot; .b.sync=&quot;num2&quot;&gt;&lt;/com1&gt; </span><br><span class="line"></span><br><span class="line">// 它等价于</span><br><span class="line">&lt;com1 </span><br><span class="line">  :a=&quot;num&quot; @update:a=&quot;val=&gt;num=val&quot;</span><br><span class="line">  :b=&quot;num2&quot; @update:b=&quot;val=&gt;num2=val&quot;&gt;&lt;/com1&gt; </span><br><span class="line"></span><br><span class="line">// 相当于多了一个事件监听，事件名是update:a，回调函数中，会把接收到的值赋值给属性绑定的数据项中。</span><br></pre></td></tr></table></figure></div>



<p>绑定复选框分两种情况，由变量的类型决定</p>
<p>​	1.数组 ：将复选框的value值放在数组中</p>
<p>​	2.非数组 ：最终都会转为boolean (checked属性)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230104192118809.png"
                      alt="image-20230104192118809"
                ></p>
<p>v-for</p>
<p>侦听数组</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230104214059350.png"
                      alt="image-20230104214059350"
                ></p>
<p>就地复用  (就是按index比较)<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230104220156064.png"
                      alt="image-20230104220156064"
                ></p>
<p>虚拟dom是什么？</p>
<p>​	本质就是一个JS对象，保存DOM关键信息</p>
<p>虚拟dom的好处是什么？</p>
<p>​	提高DOM更新的性能，不频繁操作真实DOM，只更新变化的部分</p>
<h1 id="动态class"><a href="#动态class" class="headerlink" title="动态class"></a>动态class</h1><p>:class &#x3D; “{类名:布尔值}”</p>
<p>动态style</p>
<p>:style &#x3D; “{css属性名:值}”</p>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>1.带缓存</p>
<p>2.函数内使用的变量发送改变，会重新计算结果返回</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="string">&quot;计算属性名&quot;</span>()&#123; <span class="comment">//一个函数就是一个计算属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算属性也是vue数据变量，不要和data里的重名</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    总价格：&#123;&#123;计算属性名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>完整写法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="string">&quot;计算属性名&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">val</span>) &#123;&#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">	<span class="string">&quot;要侦听的属性名&quot;</span>(newVal,oldVal)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整写法 （侦听对象）</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">	<span class="string">&quot;要侦听的属性名&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    	<span class="title function_">hander</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    		&#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;<span class="comment">//无法获取oldVal，这是vue2官方bug，但不影响开发</span></span><br></pre></td></tr></table></figure></div>



<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>组件就是可复用的Vue实例，封装了标签、样式和JS代码</p>
<h2 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子(props)"></a>父传子(props)</h2><p>单向数据流：</p>
<p>​	如果父组件给子组件传递的数据是引用数据类型，那修改其内部属性不会触发单项数据流的限制</p>
<p>​	所谓的单项数据流 只会看传过来的变量是否修改，引用类型地址值如果没变就不算修改</p>
<p>父组件传值，子组件用props接收</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">子组件</span> <span class="attr">title</span>=<span class="string">&#x27;开业&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">子组件</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>props完整写法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>, <span class="comment">//必须项</span></span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;购物车&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><p>子组件使用$emit</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&#x27;sub&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;自定义事件&#x27;</span>,val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>父组件绑定自定义事件和事件处理函数</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span> @<span class="attr">自定义事件</span>=<span class="string">&quot;fn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">	<span class="title function_">fn</span>(<span class="params">val</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><p>钩子函数：四个阶段八个方法，(一共十一个钩子</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20230107194210177.png"
                      alt="image-20230107194210177"
                ></p>
<p>vue2的生命周期</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/lifecycle.png"
                      alt="img"
                ></p>
<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>当组件内某一部分标签不确定时使用</p>
<p>子组件使用slot标签，父组件在子组件标签内写内容代替slot</p>
<p>默认内容</p>
<p>​	如果没传内容显示默认内容</p>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>​	一个组件内有2处以上slot时</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//son.vue</span><br><span class="line">&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//app.vue</span><br><span class="line">&lt;son&gt;</span><br><span class="line">    &lt;template v-slot:title&gt;&lt;/template&gt;</span><br><span class="line">    &lt;template #content&gt;&lt;/template&gt; //#是缩写</span><br><span class="line">&lt;/son&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>​	父组件使用子组件的变量</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//son.vue</span><br><span class="line">&lt;slot :row=&quot;obj&quot;&gt;</span><br><span class="line">	&lt;p&gt;&#123;&#123; obj.one &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/slot&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//app.vue</span><br><span class="line">&lt;son&gt;</span><br><span class="line">    &lt;template v-slot=&quot;scope&quot;&gt;</span><br><span class="line">    	&#123;&#123; scope.row.two &#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/son&gt;</span><br></pre></td></tr></table></figure></div>



<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>全局注册</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;指令名&quot;</span>, &#123;</span><br><span class="line">	<span class="string">&quot;inserted&quot;</span> (el)&#123;</span><br><span class="line">	<span class="comment">//当前指令所绑定的元素	</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h1 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h1><p>$refs  可以获取原生DOM元素和组件实例对象</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1 ref=&quot;myH1&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	mounted()&#123;</span><br><span class="line">        console.log(this.$refs.myH1)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>



<p>$nextTick   修改完数据后，立即获取更新后的DOM</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue中在数据更新后，DOM更新是异步操作</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">	<span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">msg</span>= <span class="string">&#x27;丑p&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg的标签&#x27;</span>)<span class="comment">// 打印的是以前的内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg的标签&#x27;</span>)<span class="comment">// 丑p   </span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>vue2</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>css-3d旋转</title>
    <url>/2023/05/25/1.css/3d%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<p>子盒子3d效果需要给父亲添加</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">transform-style: preserve-3d</span><br></pre></td></tr></table></figure></div>

<p>translateZ一般配合perspective使用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/gGQfIn3So2emcu6.png"
                      alt="image-20220329173926424"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/UVagcKxeITLzkfi.png"
                      alt="image-20220330204118733"
                ></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-transform</title>
    <url>/2023/05/25/1.css/transform/</url>
    <content><![CDATA[<p>Margin会影响页面布局，translate不脱标</p>
<p>位移百分比是 <strong>相对于自身的宽度和高度</strong></p>
<p>多重变换的正确写法</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/mPMktcQOBTK8E5L.png"
                      alt="image-20220328174643829"
                ></p>
<p>渐变：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">background-image: linear-gradient(to direction，color);</span><br></pre></td></tr></table></figure></div>





<p><strong>skew(倾斜)</strong></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-垂直水平居中的方法</title>
    <url>/2023/05/25/1.css/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="margin-auto"><a href="#margin-auto" class="headerlink" title="margin auto"></a>margin auto</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/G4RKEB569mI1Fan.png"
                      alt="image-20220328114015507"
                ></p>
<h2 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/DH6insfEuAUIaxT.png"
                      alt="image-20220328121834639"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/vu45ltq1NnTRW2L.png"
                      alt="image-20220328121851018"
                ></p>
<h2 id="translate-1"><a href="#translate-1" class="headerlink" title="translate"></a>translate</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/KZVFdCaT5nfDo3x.png"
                      alt="image-20220328122006990"
                ></p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">justify-content:center;</span><br><span class="line">align-items:center;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-预处理</title>
    <url>/2023/05/25/1.css/css%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><p><strong>Less(CSS预处理器)</strong>:扩充CSS语言，使CSS具备一定的逻辑性和计算能力</p>
<pre><code> 表达式存在多种计算单位以第一个单位为准
</code></pre>
<p>​		less计算除法正确方式： <strong>(10 &#x2F; 37.5rem)</strong></p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><div class="highlight-container" data-rel="Less"><figure class="iseeu highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;xxx.less&#x27;</span>;<span class="comment">//放在第一行</span></span><br></pre></td></tr></table></figure></div>

<h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><div class="highlight-container" data-rel="Less"><figure class="iseeu highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// out: ../css/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// out: false </span></span><br><span class="line"><span class="comment">//禁止导出</span></span><br></pre></td></tr></table></figure></div>



<h2 id="less允许嵌套"><a href="#less允许嵌套" class="headerlink" title="less允许嵌套"></a><strong>less允许嵌套</strong></h2><div class="highlight-container" data-rel="Less"><figure class="iseeu highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="selector-tag">a</span>&#123;</span><br><span class="line">		<span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="comment">//&amp; = 当前选择器 a</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="less声明变量"><a href="#less声明变量" class="headerlink" title="less声明变量"></a>less声明变量</h2><p>适用于页面出现次数比较多的适合使用</p>
<div class="highlight-container" data-rel="Less"><figure class="iseeu highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span>red;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h1 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h1><p>sass和scss是一个东西，sass是老版本</p>
<ol>
<li><p>后缀名：SASS（<strong>S</strong>yntactically <strong>A</strong>wesome <strong>S</strong>tyle<strong>S</strong>heets）版本3.0之前的后缀名为.sass，而版本3.0之后的后缀名.scss</p>
</li>
<li><p>语法规范：</p>
<p>​	sass没有<code>&#123;&#125;</code>和<code>;</code>, 有严格的缩进规范 ; </p>
<p>​    scss和css的缩进规范是一致的</p>
</li>
</ol>
<p>我们在实际开发过程中，scss是常用写法</p>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>$标识变量</p>
<div class="highlight-container" data-rel="Scss"><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#f90</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同样支持嵌套语法</p>
<h2 id="父选择器"><a href="#父选择器" class="headerlink" title="&amp;父选择器"></a>&amp;父选择器</h2><p>假如你想针对某个特定子元素 进行设置</p>
<div class="highlight-container" data-rel="Scss"><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#f90</span>;</span><br><span class="line"><span class="variable">$basic-border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:  <span class="variable">$highlight-color</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="variable">$basic-border</span>;</span><br><span class="line">  <span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p> <code>@import &#39;./xxxx.scss&#39;;</code></p>
<h2 id="混合指令"><a href="#混合指令" class="headerlink" title="混合指令"></a>混合指令</h2><p>声明：@mixin ，引入：@include</p>
<div class="highlight-container" data-rel="Scss"><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Scss"><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-动画</title>
    <url>/2023/05/25/1.css/%E5%8A%A8%E7%94%BB(animation)/</url>
    <content><![CDATA[<p>1.定义</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//第一种方法 只有起始帧和结束帧2个动作,中间自动补帧</span><br><span class="line">@keyframes action&#123;</span><br><span class="line">	from&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;//可不写</span><br><span class="line">	to&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//第二种方法	可以定义起始帧和结束帧持续时间中多个动作状态</span><br><span class="line">@keyframes action&#123;</span><br><span class="line">	0%&#123;	</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	50%&#123;	</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	100%&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> 2.调用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/kxAthImrF1oOKCS.png"
                      alt="image-20220329191411724"
                ></p>
<p>infinite: 无线循环动画</p>
<p>alternate: 反向,来回执行动画   </p>
<p>forwards: 动画结束停留在最后一帧状态</p>
<p>linear: 动画匀速运行</p>
<p><strong>暂停动画</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">animation-play-state: paused; </span><br></pre></td></tr></table></figure></div>

<p><strong>逐帧动画 (CSS默认为补间动画)</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">animation: steps()</span><br></pre></td></tr></table></figure></div>

<p><strong>多组动画使用逗号隔开</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">animation: action,action2</span><br></pre></td></tr></table></figure></div>

<p>动画效果脱标，不影响布局</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-响应式布局</title>
    <url>/2023/05/25/1.css/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>原理：通过媒体查询实现</p>
<p>优点：面对不同分辨率设备灵活性强。能够快速解决多设备显示适应问题</p>
<p>缺点：兼容各种设备工作量大，效率低下，代码累赘</p>
<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">@media()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>min-width  从小到大 </p>
<p>max-width 从大到小</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/MWpdJT2wRe8DCmf.png"
                      alt="image-20220405203936977"
                ></p>
<h3 id="使用场景1"><a href="#使用场景1" class="headerlink" title="使用场景1"></a>使用场景1</h3><p>约束移动端不要超过规定大小</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">	max-width:530px;</span><br><span class="line">	margin:0 auto;</span><br><span class="line">&#125;</span><br><span class="line">//大于等于540px触发</span><br><span class="line">@media (min-width:540px)&#123;</span><br><span class="line">	html&#123;</span><br><span class="line">		font-size:53px !important;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用场景2"><a href="#使用场景2" class="headerlink" title="使用场景2"></a>使用场景2</h3><p>显示和隐藏</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//小于等于540px触发</span><br><span class="line">@media (max-width:540px)&#123;</span><br><span class="line">	.box:nth-child(2)&#123;</span><br><span class="line">		display:none;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用场景3"><a href="#使用场景3" class="headerlink" title="使用场景3"></a>使用场景3</h3><p>外链式引入</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:540px)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p><a class="link"   href="https://www.bootcss.com/" >https://www.bootcss.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>默认将网页分成12份</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/bwKzJL3mBTscraq.png"
                      alt="image-20220406145318523"
                > </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;row&quot;&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=&quot;col-lg-<span class="number">3</span> col-md-<span class="number">4</span> col-sm-<span class="number">5</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>col默认15px内边距，row默认-15px内边距</p>
<p>使用row来消除container内边距</p>
<h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">class= &quot;col-lg-offset-(number)&quot;</span><br></pre></td></tr></table></figure></div>



<h4 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h4><p>一个盒子里再嵌套其他盒子，父盒子分成12份</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-字体图标</title>
    <url>/2023/05/25/1.css/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>1<strong>类名使用更多</strong></p>
<p>2<strong>字体图标一般都使用单独的盒子</strong></p>
<p>3<strong>使用i标签</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/iMBruYJep5FGz2g.png"
                      alt="image-20220328110611449"
                ></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-定位</title>
    <url>/2023/05/25/1.css/%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p>行内元素进行绝对定位后会变成块级元素·</p>
<p>img默认是行内元素</p>
<p>图片和文字在一行正确做法：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">display: inline-block;</span><br><span class="line">vertical-align: middle;</span><br></pre></td></tr></table></figure></div>

<p> 文字不换行</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-移动端适配</title>
    <url>/2023/05/25/1.css/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><p>我们写代码都是按照逻辑像素来写的。</p>
<p>应该按照设计图的一半大小来写代码，不然会失真。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/JwIcVMQCNS47iue.png"
                      alt="image-20220330222150932"
                ></p>
<h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>三种视口：</p>
<p>* 布局视口：手机上为了容纳为桌面浏览器设计的网站，默认布局视口宽度远大于屏幕宽度，为了让用户看到网站全貌，它会缩小网站。</p>
<p>* 视觉视口：用户正在看到的网站的区域，与设备屏幕一样宽。</p>
<p>* 理想视口：设备多宽，网页多宽。使用meta声明</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>写在父类，只针对亲子类</p>
<p><strong>主轴对齐方式</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">justify-content: flex-start    //默认起点开始依次排列</span><br><span class="line">justify-content: space-between //两边没有间距</span><br><span class="line">justify-content: space-around  //两边有间距2倍</span><br><span class="line">justify-content: space-evenly  //间距相等</span><br><span class="line">justify-content: center        //沿主轴居中排列</span><br></pre></td></tr></table></figure></div>

<p><strong>侧轴对齐方式</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">align-items:stretch  //默认效果，盒子被拉伸至铺满容器</span><br><span class="line">align-items:center	 //沿侧轴居中排列</span><br></pre></td></tr></table></figure></div>

<p><strong>伸缩比</strong></p>
<p>把父盒子分成若干份，每个子盒子各占几份</p>
<p>1.flex：1       				&#x2F;&#x2F;给子盒子加</p>
<p>2.分配父级剩余的空间</p>
<p><strong>圣杯布局</strong></p>
<p>左右两边大小固定不变，中间宽度自适应</p>
<p>两侧盒子写固定大小</p>
<p>中间盒子flex：1，沾满剩余空间 </p>
<p><strong>改变主轴方向</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">flex-direction: column;</span><br></pre></td></tr></table></figure></div>

<p><strong>背景精灵图 调二倍图</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">background-size:x auto;</span><br></pre></td></tr></table></figure></div>

<p><strong>强制弹性盒子换行显示</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">flex-wrap:wrap;</span><br><span class="line">//多行侧轴对齐方式使用align-content</span><br></pre></td></tr></table></figure></div>

<h2 id="移动适配"><a href="#移动适配" class="headerlink" title="移动适配"></a>移动适配</h2><p>flex实现布局，但不能完全自适应</p>
<ul>
<li>rem : 目前多数企业在用的方案，比如小米</li>
<li>vw&#x2F;vh : 新趋势，比如b站</li>
</ul>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>原理：通常将整个设备屏幕&#x3D;&#x3D;宽度&#x3D;&#x3D;分成10份，布局等比例缩放</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">@media (width:320px)&#123;</span><br><span class="line">	html&#123;</span><br><span class="line">		font-size:32px;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	//1rem=32px</span><br><span class="line">@media (width:480px)&#123;</span><br><span class="line">	html&#123;</span><br><span class="line">		font-size:48px;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	//1rem=48px</span><br></pre></td></tr></table></figure></div>

<p>通过媒体查询太麻烦，目前使用<strong>flexible.js</strong>来实现</p>
<h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw&#x2F;vh"></a>vw&#x2F;vh</h3><p>原理：通过视口实现在不同宽度的设备等比例缩放（1&#x2F;100视口）</p>
<p>因为混用可能导致变形，一般只使用vw</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax基本使用</title>
    <url>/2024/03/30/ajax/ajax/</url>
    <content><![CDATA[<h1 id="AJAX技术"><a href="#AJAX技术" class="headerlink" title="AJAX技术"></a>AJAX技术</h1><p>异步JavaScript和xml（用js发送异步请求）</p>
<p>在不重新加载页面的情况下向服务器请求数据（局部刷新）</p>
<blockquote>
<p>现今的ajax已经和xml没关系了，被json代替了</p>
</blockquote>
<h2 id="前后端交互的三个流程"><a href="#前后端交互的三个流程" class="headerlink" title="前后端交互的三个流程"></a>前后端交互的三个流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221211141313413.png"
                      alt="image-20221211141313413"
                ></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(1)创建XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//(2)设置请求方法和请求地址(url &amp; method)</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;https://autumnfish.cn/api/joke&#x27;</span>)</span><br><span class="line"><span class="comment">//(3)发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">//(4)注册响应回调事件</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//json转js</span></span><br><span class="line"><span class="keyword">let</span> res = json.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br></pre></td></tr></table></figure></div>

<p>get请求参数写在url后面拼接</p>
<p>post请求需要单独设置请求头</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(</span><br><span class="line"> <span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">) </span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;参数名=参数&#x27;</span>)</span><br></pre></td></tr></table></figure></div>



<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>本质是对原生 XMLHttpRequest 的封装</p>
<p>在服务器它使用原生node.js http模块, 而在客户端 (浏览端) 则使用XMLHttpRequest</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>)  </span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;请求成功&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;请求失败&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;无论是否成功&#125;)</span><br></pre></td></tr></table></figure></div>

<p>执行post请求</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">key</span>: value</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></div>

<p>常用方法（传配置对象）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;post参数&#125;, </span><br><span class="line">    <span class="attr">params</span>: &#123;get参数&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;) </span><br></pre></td></tr></table></figure></div>

<p>data是设置请求头，把参数放在请求体里</p>
<p>params是把参数放在url后面拼接</p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p> 在请求或响应被 then 或者 catch 处理前拦截他们</p>
<p>执行流程</p>
<ol>
<li><p>axios发送请求</p>
</li>
<li><p>执行请求拦截器</p>
</li>
<li><p>服务器处理</p>
</li>
<li><p>服务器响应</p>
</li>
<li><p>执行响应拦截器</p>
</li>
<li><p>执行axios的then方法</p>
</li>
</ol>
<p>请求拦截器 </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>响应拦截器</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>



<h2 id="基地址"><a href="#基地址" class="headerlink" title="基地址"></a>基地址</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;url&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>就近原则 ：如果局部有完整的url就不访问基地址</p>
<h1 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h1><p>1.传参方式不同</p>
<p>​	get是请求行传参，随着url一并传过去</p>
<p>​	post是请求体传参，分为很多次传递</p>
<p>2.数据大小不同</p>
<p>​	get一般2-5mb</p>
<p>​	post没有大小限制</p>
<p>3.速度不同</p>
<p>​	get更快</p>
<p>​	post慢</p>
<p>4.安全性不同</p>
<p>​	post更安全 （ 登录、注册必须用post）</p>
<h1 id="其他请求方式"><a href="#其他请求方式" class="headerlink" title="其他请求方式"></a>其他请求方式</h1><p>实际开发中，按照接口文档来就行了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221213194436316.png"
                      alt="image-20221213194436316"
                ></p>
<h1 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h1><p>请求行：请求方法和请求地址</p>
<p>请求头：浏览器告诉服务器数据格式（图片、json等）</p>
<p>请求体：请求参数</p>
<h1 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h1><p>响应行：服务器状态码、服务器地址等</p>
<p>响应头：服务器告诉浏览器数据格式</p>
<p>响应体：服务器响应数据</p>
<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p>2xx：请求成功</p>
<p>3xx：重定向</p>
<p>​	302：服务器重定向url</p>
<p>4xx：前端问题</p>
<p>​	404：url错误 	400：参数错误	 403、402：没有权限 </p>
<p>​	405：请求方法错误</p>
<p>5xx：服务器问题</p>
<h1 id="url发出到呈现的具体过程"><a href="#url发出到呈现的具体过程" class="headerlink" title="url发出到呈现的具体过程"></a>url发出到呈现的具体过程</h1><ol>
<li>DNS解析：把域名解析成ip地址</li>
<li>TCP连接 三次握手，保证HTTP网络传输是安全的</li>
<li>HTTP请求 ：浏览器发出请求、服务器处理请求、服务器响应请求</li>
<li>浏览器渲染引擎开始渲染页面<ol>
<li>解析html 生成dom树</li>
<li>解析css 生成样式树</li>
<li>dom树和样式树合并得到渲染树</li>
<li>呈现页面</li>
</ol>
</li>
<li>断开连接 四次挥手</li>
</ol>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ul>
<li>第一次握手：客户端发送网络包，服务端收到了。<br>这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li>
<li>第二次握手：服务端发包，客户端收到了。<br>这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li>
<li>第三次握手：客户端发包，服务端收到了。<br>这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li>
</ul>
<h2 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221214153802204.png"
                      alt="image-20221214153802204"
                ></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>1.file表单，默认自带点击事件，作用于选择文件</p>
<p>2.上传文件必须使用原生内置的FormData对象</p>
<p>​	对象会设置单独的请求头：multipart&#x2F;form-data</p>
<p>​	文件以二进制的方式传输</p>
<p>3.file表单有一个特殊的时间onchange时间，用户选择好就会执行</p>
]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本使用</title>
    <url>/2024/03/30/git/git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>git是一个开源的分布式版本控制系统</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/1605855011997933.png"
                      alt="78952a3d9ed12b0ab9dfd13ca4c512f.png"
                ></p>
<h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>​	工作区：处理工作的区域</p>
<p>​	暂存区：已完成的工作的临时存放区域，等待被提交</p>
<p>​	Git仓库:  最终存储区域</p>
<h2 id="四种状态"><a href="#四种状态" class="headerlink" title="四种状态"></a>四种状态</h2><p>未跟踪：不被Git所管理的文件</p>
<p>已修改：表示修改了文件，但还没有把结果放到暂存区</p>
<p>已暂存：表示对已修改文件的当前版本做了标记</p>
<p>已提交： 表示文件已经安全地保存在本地的Git仓库中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20221215171854018.png"
                      alt="image-20221215171854018"
                ></p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>切换分支前一定要先提交</p>
<h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>GPL：</p>
<p>​	不允许修改后和衍生的代码作为闭源的商业软件发布和销售</p>
<p>​	例子：Linux</p>
<p>MIT：</p>
<p>​	目前限制最少的协议，唯一条件是必须包含原作者的许可信息</p>
<p>​	例子：jQuery、Node.js</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>上传协议：SSH、HTTPS</p>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>实现本地仓库和Github之间免登录的加密数据传输</p>
<p>SSH Key 由两部分组成，分别是：</p>
<p>​	id_rsa (私钥文件，存放于客户端的电脑中即可)</p>
<p>​	id_rsa.pub（公钥文件，需要配置到Github中）</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js基本使用</title>
    <url>/2024/03/30/node.js/Node.js/</url>
    <content><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>基于v8引擎的JavaScript运行环境</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>浏览器渲染引擎（内核）工作的过程 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/08/07/WhipLaeEOkoBfxQ.png"
                      alt="img"
                ></p>
<p>当遇到JS标签会停止解析html去执行JS</p>
<p>不会异步加载JS，因为浏览器不希望频繁的去生成新的DOM树</p>
<p>JS是一门高级语言，需要JS引擎进行解释</p>
<p>V8引擎</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/08/07/eQGj7RcHWnqy9EM.png"
                      alt="image-20220517115219960"
                ></p>
<p>node.js和浏览器的区别</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/08/07/rpZf9ATvCOmdIHB.png"
                      alt="image-20220623144143934"
                ></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>​	REPL 一个交互式的编程环境，类似chrome F12</p>
<p>​	</p>
<p>传递参数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">node xx.<span class="property">js</span> 参数<span class="number">1</span>，参数<span class="number">2</span>;		<span class="comment">//传参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>) <span class="comment">//获取参数</span></span><br></pre></td></tr></table></figure></div>



<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>cjs 是一个规范，最初叫ServerJS</p>
<p>Node中实现cjs的本质就是对象引用赋值</p>
<p>module. exports导出，require导入</p>
<p>exports是一个全局模块对象，默认为空</p>
<blockquote>
<p>将一个对象赋值给另一个对象其实是赋值了内存地址，此时这两个对象都可以通过保存的内存地址对内存数据进行更改，一个对象属性的更改就必然会引起另一个对象属性的变化</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; xxx &#125;<span class="comment">//创建了新对象，所以不共享地址</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">name</span> = name <span class="comment">//共享内存地址</span></span><br></pre></td></tr></table></figure></div>



<h2 id="exports和module-exports的区别"><a href="#exports和module-exports的区别" class="headerlink" title="exports和module.exports的区别"></a>exports和module.exports的区别</h2><p>Common.js中是没有module.expots这个概念的</p>
<p>但是为了实现模块的导出，Node中使用了Module，每一个模块都是Module的一个实例。</p>
<p>所以在Node中真正用于导出的是module.exports</p>
<p>在node内部中做了处理，让module.exports &#x3D; exports</p>
<h3 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h3><p>&#x3D;&#x3D;同步加载&#x3D;&#x3D;</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(x)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="comment">//先执行x，再执行111</span></span><br></pre></td></tr></table></figure></div>



<p>1.模块第一次被引入时，里面的代码会被执行一次</p>
<p>2.多次引入会缓存，最终只运行一次</p>
<blockquote>
<p>为什么只会加载运行一次呢?</p>
<p>因为每个模块对象module都有一 个属性: loaded.</p>
<p>为false表示还没有加载,为true表示已经加载; </p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/08/07/W9iOvG4NEsDeytP.png"
                      alt="image-20220630212731829"
                ></p>
<p>输出顺序：main, a, c, d, e, b</p>
<p>node采用 的是图结构的深度优先算法</p>
<h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p> import导入, export导出</p>
<p>&#x3D;&#x3D;export和export default的区别&#x3D;&#x3D;</p>
<blockquote>
<ol>
<li><p><strong>export</strong> 和 <strong>export default</strong> 都可用于导出常量、函数、文件、模块等 ，</p>
</li>
<li><p>你可以在其它文件或模块中通过 <strong>import</strong> 将其导入，以便能够对其进行使用</p>
</li>
<li><p>在一个文件或模块中，<strong>export</strong>、<strong>import</strong>可以有多个，<strong>export default</strong>仅有一个</p>
</li>
<li><p>通过<strong>export</strong>方式导出，在导入时要加{ }，且不能自定义名字，<strong>export default</strong>不用加{ }，且可以自定义名字</p>
<p><a class="link"   href="https://blog.csdn.net/QXHBK/article/details/122285191" >https://blog.csdn.net/QXHBK/article/details/122285191 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
</blockquote>
<h3 id="加载过程-1"><a href="#加载过程-1" class="headerlink" title="加载过程"></a>加载过程</h3><p>&#x3D;&#x3D;异步加载&#x3D;&#x3D;</p>
<p>模块环境记录，单项绑定变量名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/08/07/3REb1X9ATm7QVGf.png"
                      alt="image-20220630231055883"
                ></p>
<p>通常情况下，&#x3D;&#x3D;CJS不能加载ES Module&#x3D;&#x3D;</p>
<p>因为CJS是同步加载，ES Module必须经过静态分析等操作</p>
<p>多数情况下，&#x3D;&#x3D;ES Module可以加载CJS&#x3D;&#x3D;</p>
<p>加载时会将其module.exports导出的内容作为default导出方式来使用</p>
<h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>不同操作系统的分隔符不同，为了兼容，推荐使用path内置模块</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;/User/man&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;abc.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> filepath = path.<span class="title function_">resolve</span>(a, b)</span><br></pre></td></tr></table></figure></div>

<p>resolve和join的区别</p>
<ol>
<li>resolve会生成绝对路径，而join只是返回当前连接的路径。</li>
<li>resolve会以最后出现的 ‘&#x2F;’为起点，作为根路径，忽略前面的片段，而join不会。</li>
</ol>
<h3 id="fs（File-System）"><a href="#fs（File-System）" class="headerlink" title="fs（File System）"></a>fs（File System）</h3><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3>]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-介绍</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/1.js%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="浏览器执行js过程"><a href="#浏览器执行js过程" class="headerlink" title="浏览器执行js过程"></a>浏览器执行js过程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/tBjfcbnQ8kohds7.png"
                      alt="image-20220103161154288"
                ></p>
<p>js是通过解释器逐行解释执行的脚本语言</p>
<h2 id="js的三部分"><a href="#js的三部分" class="headerlink" title="js的三部分"></a>js的三部分</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/Ak5rvF3tXyiVOD8.png"
                      alt="image-20220407100937069"
                ></p>
<h2 id="js的正确引用"><a href="#js的正确引用" class="headerlink" title="js的正确引用"></a>js的正确引用</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是其他的HTML标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样处理的好处是无需担心因页面未完成加载，造成DOM节点获取不到，使脚本报错的问题，而且能避免因脚本运行缓慢造成页面卡死的问题。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-基础语法</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/2.js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型:"></a><strong>基本数据类型:</strong></h2><table>
<thead>
<tr>
<th>弱数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>数字类型(Number)</td>
<td>正数，负数，小数等统一称为数字类型</td>
</tr>
<tr>
<td>字符串类型(String)</td>
<td>反引号&#96;&#96; ,  单引号’ ‘ , 双引号” “</td>
</tr>
<tr>
<td>布尔型(Boolean)</td>
<td>true&#x2F;false</td>
</tr>
<tr>
<td>未定义型(undefined)</td>
<td>声明变量未赋值</td>
</tr>
<tr>
<td>空类型(null)</td>
<td>空对象</td>
</tr>
</tbody></table>
<p><strong>模板字符串（ES6）：</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age=<span class="number">19</span></span><br><span class="line"><span class="title function_">prompt</span>(<span class="string">`我今年<span class="subst">$&#123;age&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></div>



<p>**常量: **</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>声明时必须赋值,不能更改值</p>
<p><strong>检测数据类型</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="keyword">var</span></span><br><span class="line"><span class="title function_">typeOf</span>(<span class="keyword">var</span>)</span><br></pre></td></tr></table></figure></div>



<p><strong>布尔值为false的值</strong></p>
<ol>
<li>空 字符串’ ‘</li>
<li>null</li>
<li>undefined</li>
<li>数字0</li>
<li>NaN</li>
<li>布尔值false</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><strong>类型转换</strong></h2><ul>
<li><strong>隐式转换</strong></li>
</ul>
<p>​	1. 任何数据和字符串相加结果都是字符串</p>
<p>​	2. +号可以作为正号解析转换成数字型</p>
<ul>
<li><p><strong>显示转换</strong></p>
<p>数据类型(数据)</p>
<p>例:	 Number(‘1’)</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table>
<thead>
<tr>
<th></th>
<th>逻辑运算符</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>两边true，结果true</td>
<td>一假则假</td>
</tr>
<tr>
<td>||</td>
<td>两边一个true就为true</td>
<td>一真则真</td>
</tr>
<tr>
<td>!</td>
<td>取反</td>
<td>真变假，假变真</td>
</tr>
</tbody></table>
<p><strong>运算符的优先级</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/gDyL98PrnC47qcz.png"
                      alt="image-20220408163752013"
                ></p>
<p><strong>前置自增和后置自增的区别:</strong> </p>
<p>​	前置自增 ：先自增，再使用</p>
<p>​	后置自增 ：先使用，再自增 </p>
<p><strong>&#x3D;  ,  &#x3D;&#x3D; ,  &#x3D;&#x3D;&#x3D; 的区别：</strong></p>
<p>​	&#x3D; 赋值</p>
<p>​	&#x3D;&#x3D; 比较</p>
<p>​	&#x3D;&#x3D;&#x3D; 全等 比较值与类型</p>
<p><strong>字符串比较，是比较的字符对应的ASCII码</strong></p>
<p>​	从左到右依次比较</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p><strong>if</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>三元运算符</strong>    </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">num1 &gt; num2 ? <span class="title function_">alert</span>(num1) : <span class="title function_">alert</span>(num2)</span><br></pre></td></tr></table></figure></div>

<p><strong>switch</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line">	<span class="attr">default</span>:</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>while</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>for</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量起始值;终止条件;变量变化量)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>for循环 i&#x3D;0用&lt; , i&#x3D;1用&lt;&#x3D;</strong></p>
<p><strong>break跳出整个循环</strong></p>
<p><strong>continue跳出本次循环</strong></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[]</span><br></pre></td></tr></table></figure></div>

<p>方法</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>()</span><br><span class="line"><span class="comment">//新增数组的尾部</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">unshift</span>()</span><br><span class="line"><span class="comment">//新增数组的头部</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="comment">//删除数组中最后一个元素</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="comment">//删除数组中第一个元素</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(start,deleteCount)</span><br><span class="line"><span class="comment">//(起始位置,删除几个)</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="comment">// 升序排列</span></span><br></pre></td></tr></table></figure></div>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参)&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br><span class="line">函数名(实参)</span><br></pre></td></tr></table></figure></div>

<p><strong>默认形参值为 undefined</strong></p>
<p>一般给默认值 &#x3D; 0 来初始化</p>
<p>return</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [a,b]</span><br><span class="line"></span><br><span class="line">不返回默认是<span class="literal">undefined</span></span><br><span class="line"><span class="keyword">return</span>后面不执行</span><br></pre></td></tr></table></figure></div>



<p>作用域</p>
<p>​	全局作用域：JS整个文件可使用</p>
<p>​	局部作用域：函数内使用</p>
<p>*变量没有声明 默认为全局变量</p>
<p>​	</p>
<p>变量的访问原则:</p>
<p>​	就近原则 ，先局部后全局</p>
<p><strong>匿名函数</strong></p>
<p>​	函数表达式  (将匿名函数赋值给一个变量，并且通过变量名称进行调用)</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></div>

<p>​	立即执行函数  (防止全局变量污染)</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">形参</span>)&#123;&#125;)(实参);</span><br><span class="line">第二种</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">形参</span>)&#123;&#125;(实参));</span><br></pre></td></tr></table></figure></div>



<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象(object): JavaScript里的一种引用数据类型</p>
<p>本质是一个无序的数据集合,由属性和方法组成</p>
<p>定义</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line"><span class="keyword">let</span> 对象名 = &#123;&#125;</span><br><span class="line">第二种</span><br><span class="line"><span class="keyword">let</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure></div>



<p>查</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">obj[<span class="string">&#x27;属性名&#x27;</span>]</span><br><span class="line">第二种</span><br><span class="line">obj.属性名</span><br></pre></td></tr></table></figure></div>



<p>*遍历对象 </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// 遍历属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]) <span class="comment">//输出属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能用来遍历数组，因为k是字符串类型的数组</span></span><br></pre></td></tr></table></figure></div>



<p>内置对象</p>
<p>​	JavaScript内部提供的对象,包含属性和方法 </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() <span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">//四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() <span class="comment">// [0,1)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="基本数据类型和引用数据类型的存储方式"><a href="#基本数据类型和引用数据类型的存储方式" class="headerlink" title="基本数据类型和引用数据类型的存储方式"></a>基本数据类型和引用数据类型的存储方式</h2><p>基本数据类型 ：存放在栈里</p>
<p>引用数据类型： 栈里存放地址,真正的对象实例存放在堆中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/DCe9BumXOIZsd4q.png"
                      alt="image-20220411162924072"
                ></p>
<h2 id="变量声明的规则"><a href="#变量声明的规则" class="headerlink" title="变量声明的规则"></a>变量声明的规则</h2><p>​	建议数组和对象使用const来声明</p>
<p>​	const优先，语义化更好</p>
<p>​	如果发现变量后面可改，再转成let</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM(1)</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/3.DOM(1)/</url>
    <content><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><p>​	作用：使用js来操作浏览器</p>
<p>​	组成：DOM , BOM</p>
<h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM(文档对象模型)"></a>DOM(文档对象模型)</h2><h3 id="dom树"><a href="#dom树" class="headerlink" title="dom树"></a>dom树</h3><p>​	将html文档以树状结构表现出来</p>
<p>​	作用：直观地体现了标签与标签之间的关系</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/1vBTQx9dUGHFniV.png"
                      alt="image-20220412095931552"
                ></p>
<h3 id="dom对象"><a href="#dom对象" class="headerlink" title="dom对象"></a>dom对象</h3><p>​	浏览器根据html标签生成的js对象</p>
<p>​	核心思想：把网页内容当作对象来处理</p>
<p>例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>() <span class="comment">//document即浏览器窗口中的HTML文档对象</span></span><br></pre></td></tr></table></figure></div>

<h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>常用：根据css选择器来获取dom元素 </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css选择器&#x27;</span>)  <span class="comment">//匹配第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;css选择器&#x27;</span>)	<span class="comment">//匹配多个元素</span></span><br></pre></td></tr></table></figure></div>

<p>querySelectorAll不能直接修改元素，得通过遍历数组（伪数组）的方式</p>
<p>伪数组：有长度有索引号的数组，但是没有数组方法 push（）等</p>
<p>​				哪怕只有一个元素也是一个伪数组  </p>
<p>其他（了解）：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)  <span class="comment">//根据id获取</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>) <span class="comment">//根据标签获取</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>) <span class="comment">//根据类名获取</span></span><br></pre></td></tr></table></figure></div>



<h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><h4 id="修改获取元素内容"><a href="#修改获取元素内容" class="headerlink" title="修改获取元素内容"></a>修改获取元素内容</h4><ul>
<li>innerText 	  纯文字,不解析标签</li>
<li>innerHTML    能解析标签</li>
</ul>
<h4 id="修改元素常见属性"><a href="#修改元素常见属性" class="headerlink" title="修改元素常见属性"></a>修改元素常见属性</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.属性 = 值</span><br></pre></td></tr></table></figure></div>



<h4 id="修改元素css样式属性"><a href="#修改元素css样式属性" class="headerlink" title="修改元素css样式属性"></a>修改元素css样式属性</h4><p>一  单个修改通过style</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">元素对象名.<span class="property">style</span>.样式 = <span class="string">&#x27;值&#x27;</span>  <span class="comment">//记得带单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果样式有连接符- ，转换成小驼峰命名法</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">marginTop</span> = <span class="string">&#x27;10px&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>二. 如果修改的样式比较多，可以通过类名操作</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="property">className</span> = <span class="string">&#x27;类名&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>三. 多个类名容易覆盖，可以使用<strong>classList</strong> </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)  <span class="comment">//添加</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//删除</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//有就删，没有就加上</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//是否包含某个类，是返回true</span></span><br></pre></td></tr></table></figure></div>



<h4 id="修改表单的值"><a href="#修改表单的值" class="headerlink" title="修改表单的值"></a>修改表单的值</h4><p>​	表单属性中添加就有效果，移除就没有效果，一律使用布尔值表示</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">input.<span class="property">checked</span> = <span class="literal">true</span></span><br><span class="line">input.<span class="property">disabled</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>



<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义  </span></span><br><span class="line">&lt;div data-id&gt; &lt;/div&gt;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">const</span> div=<span class="variable language_">document</span>.<span class="title function_">querydocument</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">id</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="计时器-间歇函数"><a href="#计时器-间歇函数" class="headerlink" title="计时器 间歇函数"></a>计时器 间歇函数</h3> <div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,time)</span><br><span class="line"><span class="comment">// 清除</span></span><br><span class="line"><span class="built_in">clearInterval</span>(a)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM(2)</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/4.DOM(2)/</url>
    <content><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>什么是事件监听 ?</p>
<p>​	就是让程序检测是否有事件产生，一旦有事件触发，立即调用一个函数做出响应</p>
<p>事件的三要素是什么？</p>
<ul>
<li><p>事件源 (谁被触发了)</p>
</li>
<li><p>事件类型 （用什么方式触发）</p>
</li>
<li><p>事件处理程序 （要做什么事情）</p>
</li>
</ul>
<h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/pR598PQ7wVizS4a.png"
                      alt="image-20220413122845226"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>什么是事件对象？</p>
<p>​	也是一个对象，这个对象里面有事件触发时的相关信息</p>
<h2 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h2><p>环境对象：指函数内部特殊的<strong>变量this</strong> ，它代表当前函数运行时所处的环境</p>
<p> 粗略规则 ：谁调用，this就是谁</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>函数A 作为参数传递给函数B时，我们称函数A为回调函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> ()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(fn, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><ul>
<li>事件流是指事件完整执行过程中的流动路径</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/VdhpQDikj1AYZBv.png"
                      alt="image-20220414115411261"
                ></p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><ul>
<li>从DOM的根元素开始去执行对应的事件（从外到里）</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="title function_">addEventListener</span>(事件类型，事件处理函数，是否使用捕获机制)</span><br></pre></td></tr></table></figure></div>

<p>第三个参数传true代表捕获阶段触发（很少使用）</p>
<p>传入false代表冒泡阶段触发，默认就是false</p>
<p>若使用L0事件监听，只有冒泡阶段，没有捕获</p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><ul>
<li>当一个元素触发事件后，会依次向上调用同名事件(从里到外)</li>
</ul>
<h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">事件对象.<span class="title function_">stopPropagation</span>() <span class="comment">//阻止流动传播 (冒泡和捕获都可以)</span></span><br><span class="line"></span><br><span class="line">事件对象.<span class="title function_">preventDefault</span>() <span class="comment">//阻止元素默认行为</span></span><br></pre></td></tr></table></figure></div>



<h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">事件对象.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span><br><span class="line">事件对象.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">//匿名函数无法解绑 </span></span><br></pre></td></tr></table></figure></div>



<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul>
<li>事件委托是利用事件流的特征解决一些开发需求的知识技巧</li>
</ul>
<p>​	优点：减少注册次数，可以提高程序性能</p>
<p>​	原理：利用事件冒泡的特点</p>
<p>​				给父元素注册事件，当我们触发子元素的时候，</p>
<p>​				会冒泡到父元素身上，从而触发父元素的事件</p>
<h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//执行的操作</span></span><br><span class="line">&#125;)<span class="comment">//等整个界面加载完了再执行</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//执行的操作</span></span><br><span class="line">&#125;)<span class="comment">//等整个dom树加载完了再执行,无需等待样式表，图像等完全加载</span></span><br></pre></td></tr></table></figure></div>



<h3 id="页面滚动事件"><a href="#页面滚动事件" class="headerlink" title="页面滚动事件 *"></a>页面滚动事件 *</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>)</span><br><span class="line">    <span class="comment">//获取整个页面滚动了多少像素 documentElement=HTMl</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(x,y)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>获取位置 可读写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/Zf2wN5VSRolvGTH.png"
                      alt="image-20220415154119341"
                ></p>
<h3 id="页面尺寸事件"><a href="#页面尺寸事件" class="headerlink" title="页面尺寸事件"></a>页面尺寸事件</h3><p> 获取元素的宽高</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/5IXuSdUGaCspKZ2.png"
                      alt="image-20220415164304983"
                ></p>
<p>会在窗口尺寸改变的时候触发事件：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="元素尺寸与位置"><a href="#元素尺寸与位置" class="headerlink" title="元素尺寸与位置"></a>元素尺寸与位置</h3><p>获取元素的自身宽高、包含元素自身设置的宽高、padding、border</p>
<p>得到的位置以带有定位的父级为准，如果没有按文档左上角</p>
<p>offsetWidth,offsetHeight,offsetTop  （只读属性)</p>
<p>获取出来的是数值,方便计算</p>
<p>注意: 获取的是可视宽高, 如果盒子是隐藏的,获取的结果是0</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"><span class="comment">//方法返回元素的大小和其相对于视口的位置</span></span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/QbGThmu23LDCpXl.png"
                      alt="image-20220415194110636"
                ></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    scroll-behavior: smooth;</span><br><span class="line">&#125; //可以让滚动动作丝滑地滚动,默认是直接跳转</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM(3)</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/5.DOM(3)/</url>
    <content><![CDATA[<h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>() /实例化</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/7tPaKj6bZvc5B2w.png"
                      alt="image-20220416152553631"
                ></p>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><ul>
<li>是指1970年1月1日00时00分00秒到现在的毫秒数</li>
</ul>
<p>使用场景: 如果需要倒计时效果，不能直接计算，需要通过时间戳完成</p>
<p>获得时间戳的三种方法</p>
<p>1.getTime()</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br></pre></td></tr></table></figure></div>

<p>2.+new Date()  推荐使用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br></pre></td></tr></table></figure></div>

<p>3.Date.now()</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()) <span class="comment">//只能返回当前的时间戳，不能指定时间</span></span><br></pre></td></tr></table></figure></div>

<h2 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h2><p>DOM树里的每一个内容都是节点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/2PcRmSDuepwo1GU.png"
                      alt="image-20220416163850571"
                ></p>
<h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><p>父节点  </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">parentNode</span>)</span><br></pre></td></tr></table></figure></div>

<p>子节点</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">children</span>) <span class="comment">//返回所有的元素 伪数组,选择的是亲儿子</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">childNodes</span>) <span class="comment">//获得所有子节点,包括注释节点等(不用)</span></span><br></pre></td></tr></table></figure></div>

<p>兄弟节点</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">previousElementSibling</span>) <span class="comment">//上一个兄弟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">nextElementSibling</span>)	<span class="comment">//下一个兄弟</span></span><br></pre></td></tr></table></figure></div>



<h3 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点*"></a>增加节点*</h3><ul>
<li>即创造一个新的网页元素，再添加到网页内，先创建节点，后插入节点</li>
</ul>
<p>创建</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> li=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">//创建li元素</span></span><br></pre></td></tr></table></figure></div>

<p>插入节点</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(li) <span class="comment">//插入到父元素最后一个子元素后面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>])  <span class="comment">//(插入的元素，放在哪个元素的前面)</span></span><br></pre></td></tr></table></figure></div>



<h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><p>true 代表包括后代节点一起克隆   (深克隆)</p>
<p>false 代表克隆时不包括后代节点（浅克隆）</p>
<p>默认为 false</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>) </span><br></pre></td></tr></table></figure></div>



<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div>



<h2 id="手机端事件（了解）"><a href="#手机端事件（了解）" class="headerlink" title="手机端事件（了解）"></a>手机端事件（了解）</h2><table>
<thead>
<tr>
<th>触屏touch事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>touchstart</td>
<td>手指触摸到一个DOM元素时触发</td>
</tr>
<tr>
<td>touchmove</td>
<td>手指在DOM元素上滑动时触发</td>
</tr>
<tr>
<td>touchend</td>
<td>手指从一个DOM元素上移开时触发</td>
</tr>
</tbody></table>
<h2 id="Swiper插件"><a href="#Swiper插件" class="headerlink" title="Swiper插件"></a>Swiper插件</h2><p><a class="link"   href="https://www.swiper.com.cn/" >https://www.swiper.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>轮播图插件</p>
<h2 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/Bt6gMPxKGHrjdiD.png"
                      alt="image-20220417171450763"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/KGPDLzuNZFmOIfB.png"
                      alt="image-20220417171658966"
                ></p>
<p>重绘不一定引起回流， 回流一定会引起重绘</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-BOM</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/6.BOM/</url>
    <content><![CDATA[<h1 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM (浏览器对象模型)"></a>BOM (浏览器对象模型)</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/OjvP76b9k4DhEwH.png"
                      alt="image-20220418134809983"
                ></p>
<h2 id="定时器-—-延时函数"><a href="#定时器-—-延时函数" class="headerlink" title="定时器 — 延时函数"></a>定时器 — 延时函数</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, time) <span class="comment">//只执行一次</span></span><br></pre></td></tr></table></figure></div>

<p>清除延时函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, time)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer)</span><br></pre></td></tr></table></figure></div>



<h2 id="JavaScript的执行机制"><a href="#JavaScript的执行机制" class="headerlink" title="JavaScript的执行机制"></a>JavaScript的执行机制</h2><p>​	单线程，同一时间只能做一件事</p>
<p>为了解决这个问题,利用多核CPU的计算能力，HTML5提出Web Worker标准,允许JavaScript脚本创建多个线程。于是,JS中出现了同步和异步。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/PkTS7wgHljV1Gq5.png"
                      alt="image-20220418141419453"
                ></p>
<p>本质区别：各个流程的执行顺序不同</p>
<p> <strong>同步任务都在主线程上执行，形成一个执行栈</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/SdXLFhxiKzGjkEg.png"
                      alt="image-20220418141646498"
                ></p>
<p><strong>异步任务是通过回调函数实现</strong></p>
<p>一般而言，有以下三种类型：</p>
<p>1、普通事件，如click、resize等</p>
<p>2、资源加载，如load、error等 </p>
<p>3、定时器，包括setInterval、 setTimeout等</p>
<p>异步任务相关添加到任务队列中( 任务队列也称为消息队列)。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/zPEq15oN27HCsfA.png"
                      alt="image-20220418141945365"
                ></p>
<p><strong>执行顺序</strong></p>
<ol>
<li><p>先执行栈中的同步任务</p>
</li>
<li><p>异步任务放在 任务队列中</p>
</li>
<li><p>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务,于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/K2IzXteZSjAELHB.png"
                      alt="image-20220418142844191"
                ></p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>● location的数据类型是对象，它拆分并保存了URL地址的各个组成部分</p>
<p>● 常用属性和方法:</p>
<p>➢  href 属性获取完整的URL地址，对其赋值时用于地址的跳转</p>
<p>➢  search属性获取地址中携带的参数, 符号?后面部分</p>
<p>➢  hash属性获取地址中的啥希值，符号#后面部分</p>
<p>➢  reload方法用来刷新当前页面，传入参数true时表示强制刷新</p>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>● navigator的数据类型是对象,记录浏览器本身的相关信息</p>
<p>​	检测浏览器的版本及平台</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测userAgent（浏览器信息）</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="comment">//验证是否为Android或iPhone</span></span><br><span class="line"><span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>) <span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line"><span class="comment">//如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line"><span class="keyword">if</span> (android || iphone) &#123; location.<span class="property">href</span> = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></div>



<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>● history的数据类型是对象,主要管理历史记录</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">back</span>() <span class="comment">//可以后退功能</span></span><br><span class="line">history.<span class="title function_">forward</span>() <span class="comment">//前进功能</span></span><br><span class="line">history.<span class="title function_">go</span>(参数) <span class="comment">//前进后退功能参数如果是1前进1个页面如果是-1后退1个页面</span></span><br></pre></td></tr></table></figure></div>



<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>1、数据存储在用户浏览器中</p>
<p>2、设置、读取方便、甚至页面刷新不丢失数据</p>
<p>3、容量较大，sessionStorage和localStorage约5M左右 </p>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage *"></a>localStorage *</h3><p>作用：可以将数据永久存储在本地，除非手动删除</p>
<p>特性:</p>
<ol>
<li><p>可以多窗口页面共享(同一浏览器可以共享)</p>
<ol start="2">
<li>   以键值对的形式存储使用</li>
<li>   只能存储字符串数据类型</li>
</ol>
</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>)  <span class="comment">//存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>)  <span class="comment">//获取数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>)  <span class="comment">//删除数据</span></span><br></pre></td></tr></table></figure></div>



<h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>特性:</p>
<p>➢     生命周期为关闭浏览器窗口</p>
<p>➢     在同一个窗口(页面)下数据可以共享</p>
<p>➢     以键值对的形式存储使用</p>
<p>➢     用法跟localStorage基本相同</p>
<h3 id="存储复杂数据类型的方式"><a href="#存储复杂数据类型的方式" class="headerlink" title="存储复杂数据类型的方式"></a>存储复杂数据类型的方式</h3><p>转换成JSON字符串存储, 本质还是字符串数据类型</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br></pre></td></tr></table></figure></div>

<p>把JSON字符串转换成对象</p>
  <div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>))</span><br></pre></td></tr></table></figure></div>



<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="map方法-迭代数组"><a href="#map方法-迭代数组" class="headerlink" title="map方法 (迭代数组)"></a>map方法 (迭代数组)</h3><p>可以处理数据，并且返回一个新的数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, i</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">//数组元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//下标</span></span><br><span class="line">    <span class="keyword">return</span> item + <span class="string">&#x27;老师&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)  <span class="comment">//[&#x27;a老师&#x27;, &#x27;b老师&#x27;,&#x27;c老师&#x27;]</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/4KbA1RHrwPCTyh5.png"
                      alt="image-20220418193240536"
                ></p>
<h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><p>用于把数组中的所有元素转换成一个字符串</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)) <span class="comment">//abc</span></span><br></pre></td></tr></table></figure></div>

<h3 id="forEach-遍历数组方法"><a href="#forEach-遍历数组方法" class="headerlink" title="forEach 遍历数组方法"></a>forEach 遍历数组方法</h3><p>不返回值，适用于遍历数组对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr.<span class="title function_">forEach</span>(<span class="params"><span class="keyword">function</span> (item, i)</span>)&#123;</span><br><span class="line">                  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>筛选并返回</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">const</span> newArr=arr.<span class="title function_">filter</span>(<span class="params"><span class="keyword">function</span> (item, i)</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> item &gt;= <span class="number">20</span></span><br><span class="line">&#125;  <span class="comment">// 20 30</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/hyS8lxFuHM4QDVZ.png"
                      alt="image-20220422222045271"
                ></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2023/05/25/2.javascript/js%E5%9F%BA%E7%A1%80/7.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>用于匹配字符串中字符组合的模式</li>
</ul>
<p>使用场景：</p>
<p>​	验证表单，过滤敏感词，提取关键字等</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>定义规则，再去匹配</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str =<span class="string">&#x27;学习前端&#x27;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">//返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)) <span class="comment">//返回数组</span></span><br></pre></td></tr></table></figure></div>



<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>普通字符:</p>
<p>大多数的字符仅能够描述它们本身，这些字符称作普通字符，</p>
<p>例如所有的字母和数字。</p>
<p>元字符(特殊字符)：</p>
<p>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</p>
<h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>表示位置，开头和结尾, 必须用什么开头，必须用什么结尾</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈哈&#x27;</span>)) <span class="comment">//true，必须以哈开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈哈&#x27;</span>)) <span class="comment">//true，必须以哈结尾</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈&#x27;</span>)) <span class="comment">//true，精确匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈哈哈&#x27;</span>)) <span class="comment">//false, 精确匹配只能一个</span></span><br></pre></td></tr></table></figure></div>



<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>表示重复次数</p>
<table>
<thead>
<tr>
<th align="center">量词</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">重复零次或者更多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">重复一次或者更多次</td>
</tr>
<tr>
<td align="center">？</td>
<td align="center">重复零次或者一次</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">重复n次</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">重复n次或者更多次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">重复n到m次</td>
</tr>
</tbody></table>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>[] 匹配字符集合</p>
<p>只要包含 ‘abc’ 中任意一个字符， 都返回true</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^[abc]$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^[abc]$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^[abc]$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<p>[a-z] 表示a到z 26个英语字母都可以</p>
<p>[a-zA-Z] 表示大小写都可以</p>
<p>[] 里面加 ^ ，表达式取反</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^[^abc]$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">//除了abc都为true</span></span><br></pre></td></tr></table></figure></div>



<p>. 匹配除换行符之外的任何单个字符</p>
<table>
<thead>
<tr>
<th align="center">预定义</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">匹配0-9之间的任一数字，相当于[0-9]</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配所有O-9以外的字符，相当于[^0-9]</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配空格（包括换行符、制表符、空格符等），相等于[ \t\r\n\v\f]</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配非空格的字符，相当于[^Itlrinlvlf]</td>
</tr>
</tbody></table>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符约束正则执行的某些细节行为,如是否区别大小写，是否支持多行匹配等</p>
<p> i 是单词ignore的缩写，正则匹配时字母不区分大小写<br>g 是单词global的缩写，匹配所有满足正则表达式的结果</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/表达式/</span>修饰符)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>



<p>replace</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(<span class="regexp">/正则表达式/</span>, <span class="string">&#x27;替换的文本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;java是一门编程语言，学完JAVA工资很高&#x27;</span></span><br><span class="line"><span class="keyword">const</span> re = str.<span class="title function_">replace</span>(<span class="regexp">/java/ig</span>, <span class="string">&#x27;前端&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)  <span class="comment">//前端是一门编程语言，学完前端工资很高</span></span><br></pre></td></tr></table></figure></div>



<h2 id="change事件"><a href="#change事件" class="headerlink" title="change事件"></a>change事件</h2><p>当文本框的内容变化时 触发</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-构造函数</title>
    <url>/2023/05/25/2.javascript/js%E8%BF%9B%E9%98%B6/2.%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用对象字面量创建对象</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;       </span><br><span class="line"><span class="comment">//利用new Object 创建对象</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">//利用构造函数创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数是一个特殊的函数，主要用来初始化对象,快速创建多个类似的对象</p>
<p>两个约定:</p>
<p>​	命名以大写字母开头</p>
<p>​	只能由”new”操作符来执行</p>
<p>实例化执行过程：</p>
<ol>
<li>创建新空对象</li>
<li>构造函数this指向新对象</li>
<li>执行构造函数代码，修改this，添加新的属性  </li>
<li>返回新对象</li>
</ol>
<p>通过构造函数创建的对象称为实例对象，</p>
<p>实例对象中的属性和方法称为实例成员</p>
<p>构造函数的属性和方法被称为静态成员</p>
<h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><p>​	实例对象不能使用构造函数</p>
<p>Object 三个静态方法</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">// 获取所有的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))   <span class="comment">//[&#x27;uname&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="comment">// 获取所有的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))	<span class="comment">//[&#x27;pink&#x27;, 18 ]</span></span><br><span class="line"><span class="comment">//拷贝对象 给对象添加属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o, &#123; <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;)	</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o) 		<span class="comment">//[&#x27;uname&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;]</span></span><br></pre></td></tr></table></figure></div>

<h2 id="实例方法-Array"><a href="#实例方法-Array" class="headerlink" title="实例方法 Array"></a>实例方法 Array</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/Y5fDwWoaMPvgImh.png"
                      alt="image-20220504201805647"
                ></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/c3tYSk9TFGzygnN.png"
                      alt="image-20220504201925760"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">累计值，当前元素</span>)&#123;&#125;, 起始值)</span><br><span class="line"><span class="comment">//1.如果有起始值，则以起始值为准开始累计，累计值=起始值</span></span><br><span class="line"><span class="comment">//2.如果没有起始值，则累计值以数组的第一-个数组元素作为起始值开始累计</span></span><br><span class="line"><span class="comment">//3.后面每次遍历就会用后面的数组元素累计到累计值里面(类似求和里面的sum)</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item )	<span class="comment">//6</span></span><br></pre></td></tr></table></figure></div>

<p>其他常见的方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/8Ve4Q5WEUK2qTGM.png"
                      alt="image-20220504204701220"
                ></p>
<p>from() 伪数组转换成真数组</p>
<h2 id="实例方法-String"><a href="#实例方法-String" class="headerlink" title="实例方法 String"></a>实例方法 String</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/MgmeTUNOC7xnLFV.png"
                      alt="image-20220507144115000"
                ></p>
<h2 id="实例方法-number"><a href="#实例方法-number" class="headerlink" title="实例方法 number"></a>实例方法 number</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">10.923</span></span><br><span class="line">num.<span class="title function_">toFixed</span>(<span class="number">2</span>)  <span class="comment">//保留两位小数</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-作用域</title>
    <url>/2023/05/25/2.javascript/js%E8%BF%9B%E9%98%B6/1.%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="作用域-scope"><a href="#作用域-scope" class="headerlink" title="作用域  (scope)"></a>作用域  (scope)</h2><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><ul>
<li>​	局部作用域分成&#x3D;&#x3D;函数作用域和块作用域&#x3D;&#x3D;</li>
</ul>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域:"></a>函数作用域:</h4><p>​	在函数内部声明的变量只能在函数内部访问</p>
<blockquote>
<p>总结:</p>
<p>1.函数内部声明的变量，在函数外部无法被访问</p>
<p>2.函数的参数也是函数内部的局部变量</p>
<p>3.不同函数内部声明的变量无法互相访问</p>
<p>4.函数执行完毕后，函数内部的变量实际被清空了</p>
</blockquote>
<h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>​	使用{ } 包裹的代码称为代码块</p>
<blockquote>
<p>总结:</p>
<p>1.let声明的变量会产生块作用域，var不会产生块作用域</p>
<p>2.const声明的常量也会产生块作用域</p>
<p>3.不同代码块之间的变量无法互相访问</p>
<p>4.推荐使用let或const </p>
</blockquote>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><script>标签和.js文件 就是全局作用域

在全局作用域中声明的变量，其他作用域都可以访问

 

### 作用域链

作用域链本质上就是底层的==变量查找机制==



​	在函数被执行时，会优先在当前函数作用域中查找变量

​	如果当前作用域查找不到就会依次逐级查找父级作用域直到全局作用域



> 总结:
> 1.嵌套关系的作用域串联起来形成了作用域链
> 2.相同作用域链中按着从小到大的规则查找变量
> 3.子作用域能够访问父作用域，父级作用域无法访问子级作用域



## JS垃圾回收机制

Garbage Collection 简称 GC

     JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收机制自动回收



什么是内存泄漏？

​	不再使用的内存，没有及时释放，就叫做内存泄漏



### 内存的生命周期

1. 内存分配：当我们声明变量，函数，对象的时候，系统会自动为它们分配内存

2. 内存使用：即读写内存，也就是使用变量，函数等

3. 内存回收：使用完毕，由垃圾回收机制自动回收不再使用的内存

   

> 说明:
> 全局变量一般不会回收(关闭页面会回收)
> 一般情况下局部变量的值,不用了,会被自动回收掉



### 垃圾回收算法

#### 引用计数法

IE采用的算法，定义内存不再使用的标准就是看一个对象是否有指向它的引用

算法:

1. 跟踪记录每个值被引用的次数
2. 如果这个值的被引用了一次，那么就记录次数1
3. 多次引用会累加
4. 如果减少一个引用就减1
5. 如果引用次数是0，则释放内存



缺点：==嵌套引用==

​	如果两个对象互相引用，尽管不再使用，垃圾回收器也不会进行回收，导致内存泄漏

#### 标记清除法

现代的浏览器大多都是基于标记清除算法的某些改进算法，总体思想都是一致的

核心:

1. 标记清除算法将“不再使用的对象”定义为“无法达到的对象”
2. 就是从根部 (在JS中就是全局对象)出发定时扫描内存中的对象,凡是能从根部到达的对象，都是还需要使用的
3. 那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收



## 闭包 (closure)

闭包 = ==内层函数 + 外层函数的变量== 

作用：封闭数据，提供操作，外部也可以访问函数内部的变量

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure></div>

可能引发的问题：

​	内存泄漏  (全局变量)



## 变量提升

只存在var

变量提升到当前作用域的最前面，==只提升声明，不提升赋值==

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var num    </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num )	<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">10</span></span><br></pre></td></tr></table></figure></div>



## 函数提升

​	把所有函数提升到当前作用域的最前面

​	==只提升函数声明，不提升函数调用==



- [x] 函数表达式不存在提升的现象



## 函数参数

### 动态参数（arguments）

arguments 只存在函数里面，是一个伪数组

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">       sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">23</span>,<span class="number">2</span>)) <span class="comment">//返回25 可以传任意个参数</span></span><br></pre></td></tr></table></figure></div>

### 剩余参数

用于获取多余的实参,是一个真数组

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a,b, ...arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>)	<span class="comment">// []</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>

扩展：展开运算符  ( 可以把数组展开 )

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="comment">// 求数组最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr) ) <span class="comment">// 3  </span></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr = [...arr, ...arr2] <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></div>



## ==箭头函数==

目的： 更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁

使用场景：更适用于那些本来需要匿名函数的地方

箭头函数属于表达式函数， 因此不存在函数提升

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;    <span class="comment">//只有一个形参的时候可以省略小括号</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//只有一行代码的时候可以省略大括号, 并且不用写return 直接返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; x + x </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)  <span class="comment">//2</span></span><br><span class="line"><span class="comment">//可以直接返回一个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = uname =&gt; (&#123;<span class="attr">uname</span>: uname&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;小华&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

箭头函数的参数

​	只有剩余参数，没有动态参数（arguments)



箭头函数的 this

​	不会创建自己的this，只会从自己的作用域链的上一层找this

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//windows</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



## ==解构赋值==

### 数组解构

​	将数组的单元值快速批量赋值给一系列变量的简化语法

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[b, a] = [a, b] <span class="comment">//2 1</span></span><br></pre></td></tr></table></figure></div>

JS必须加分号的两种情况

​	立即执行函数，解构赋值



变量大于单元值 多出的变量为undefined

遇到变量少， 单元值多的情况  

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>[a,b ...arr] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[3, 4]</span></span><br></pre></td></tr></table></figure></div>



可以按需导入赋值

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></div>



多维数组

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, [c, d]] =[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure></div>

### 对象解构

​	将对象属性和方法快速批量赋值给一系列变量的简化语法

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小王&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = obj</span><br><span class="line"><span class="comment">// 变量名和属性名必须一致, 但可以重新改名</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: username, age&#125; = obj</span><br><span class="line"><span class="comment">//旧变量名 : 新变量名</span></span><br></pre></td></tr></table></figure></div>

多级对象结构

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pig =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">mother</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">        <span class="attr">father</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name, <span class="attr">family</span>: &#123;mother, father&#125;&#125; = pig</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-面向对象</title>
    <url>/2023/05/25/2.javascript/js%E8%BF%9B%E9%98%B6/3.%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h1><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>面向过程就是分析出解决问题所需要的步骤，用函数一步步实现，使用的时候一个个依次调用</p>
<p>例子：蛋炒饭</p>
<p>优点：性能较高</p>
<p>缺点：没有面向对象灵活，可复用</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>OOP</p>
<p>面向对象就是把事务分解成一个个对象，由对象之间分工与合作</p>
<p>例子：盖浇饭</p>
<p>优点：灵活，可复用，容易维护和开发，适合多人合作的大项目</p>
<p>特性：封装，多态，继承</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>JS通过构造函数实现面向对象的封装特性</p>
<p>实例创建的对象彼此独立，互不影响</p>
<p>缺点：浪费内存</p>
<p>不同的实例对象，他们的函数占用不同的内存</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>)</span><br><span class="line"><span class="comment">//  ldh.sing != zxy.sing</span></span><br></pre></td></tr></table></figure></div>



<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>prototype</p>
<p>每一个构造函数都有一个prototype</p>
<p>通过原型分配的函数是所有对象所共享的</p>
<p>this指向实例化对象</p>
<p>把公共的函数写到原型对象里去就可以节约内存</p>
<h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>每个原型对象都有一个constructor属性 (构造函数)</p>
<p>指向该原型对象的构造函数</p>
<p>应用场景：指向该原型对象的构造函数   </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/9kbfnUJv6hjpP1i.png"
                      alt="image-20220508160806598"
                ></p>
<h2 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h2><p> 每个对象都会有一个属性 [[proto]]  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/aLUgvt5PlbDYXBW.png"
                      alt="image-20220508191558042"
                ></p>
<h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br></pre></td></tr></table></figure></div>



<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起， 并且这种关联的关系是-种链状的结构，我们将原型对象的链状结构关系称为原型链</p>
<p>实质就是一个查找规则  ,先找对象自身，依次往上找</p>
<p>所有的对象里面都有对象原型，指向原型对象</p>
<p>所有的原型对象里面都有constructor，指向创造该原型对象的构造函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/pXGs2TPI8ZUntFQ.png"
                      alt="image-20220509142436696"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)</span><br><span class="line"><span class="comment">//可以检查构造函数的原型对象是否出现在某个实例对象的原型链上</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-高阶技巧</title>
    <url>/2023/05/25/2.javascript/js%E8%BF%9B%E9%98%B6/4.%E9%AB%98%E9%98%B6%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><p>直接复制赋值造成的问题，两个对象指向同一个堆</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pink = &#123;</span><br><span class="line">    color : pink</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> red = pink</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/8JvowkmqDl63shN.png"
                      alt="image-20220511134607966"
                ></p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>拷贝的是地址，但如果出现多层对象还是会出问题</p>
<p>拷贝对象：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;wang&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;man&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> a = &#123;...obj&#125;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;wang&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;man&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(a,obj)</span><br></pre></td></tr></table></figure></div>

<p>拷贝数组：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">concat</span>() <span class="comment">//第一种</span></span><br><span class="line">[...arr]	<span class="comment">//第二种</span></span><br></pre></td></tr></table></figure></div>



<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>拷贝的是对象，不会影响到旧对象</p>
<p>三种方法</p>
<ol>
<li>函数递归</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2022/05/17/zTSwWjo2pKX375B.png"
                      alt="image-20220511145535159"
                ></p>
<ol start="2">
<li>利用lodash库深拷贝</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先引用库，然后直接调用方法</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = _.<span class="title function_">cloneDeep</span>()</span><br></pre></td></tr></table></figure></div>



<pre><code> 3.  把对象转换成JSON字符串
</code></pre>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parese</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure></div>



<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="throw抛异常"><a href="#throw抛异常" class="headerlink" title="throw抛异常"></a>throw抛异常</h2><p>指代码执行过程中可能发生的错误，尽量避免错误的发生导致整个程序无法继续运行</p>
<p>​	手动添加异常，后面的代码不执行</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>



<h2 id="try-catch捕获异常"><a href="#try-catch捕获异常" class="headerlink" title="try catch捕获异常"></a>try catch捕获异常</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//可能存在错误的代码</span></span><br><span class="line">	&#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    	<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//真假都会执行</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>断点调试</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h1><h2 id="普通函数的this指向"><a href="#普通函数的this指向" class="headerlink" title="普通函数的this指向"></a>普通函数的this指向</h2><p>一般情况，谁调用就指向谁，没有调用者指向windows</p>
<p>严格模式下指向undefined</p>
<h2 id="箭头函数的this指向"><a href="#箭头函数的this指向" class="headerlink" title="箭头函数的this指向"></a>箭头函数的this指向</h2><p>箭头函数实际上没有this，会找最近作用域中的this</p>
<h2 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h2><p>call方法  (调用函数， 传递参数)</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(obj,<span class="number">1</span>,<span class="number">2</span>) 	<span class="comment">// this指向call ，返回 3</span></span><br></pre></td></tr></table></figure></div>



<p>apply方法  (调用函数， 传递数组)</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">1</span>,<span class="number">2</span>])	<span class="comment">// this指向call ，返回 3</span></span><br></pre></td></tr></table></figure></div>



<p>&#x3D;&#x3D;bind方法&#x3D;&#x3D;  不会调用函数，返回原函数拷贝后的新函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = fn.<span class="title function_">bind</span>(obj)   <span class="comment">//a的this 指向obj</span></span><br></pre></td></tr></table></figure></div>



<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>debounce</p>
<p>单位时间内，频繁触发事件，以最后一次为准</p>
<p>一般用定时器做</p>
<p>例子：搜索框输入</p>
<h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><p>throttle</p>
<p>单位时间内，频繁触发事件，只触发一次</p>
<p>一般用时间戳、定时器做</p>
<p>指连续触发事件, 但在n秒中只执行一次函数</p>
<p>例子：滚动条事件，轮播图按钮</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
